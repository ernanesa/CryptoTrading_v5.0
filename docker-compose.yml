services:
  postgres_service:
    image: postgres:17-alpine
    container_name: postgres_service
    environment:
      POSTGRES_USER: Bettina
      POSTGRES_PASSWORD: Bettina@1234
      POSTGRES_DB: CryptoTrading_DB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Dados/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cryptotrading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Bettina -d CryptoTrading_DB"]
      interval: 30s
      timeout: 10s
      retries: 5

  agendamentos_service:
    build:
      context: ./Agendamentos
      dockerfile: Dockerfile
    container_name: agendamentos_service
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8081
    ports:
      - "8081:8081"
    depends_on:
      postgres_service:
        condition: service_healthy
    networks:
      - cryptotrading_network
    restart: unless-stopped

  dados_service:
    build:
      context: ./Dados
      dockerfile: Dockerfile
    container_name: dados_service
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8080
    ports:
      - "8080:8080"
    depends_on:
      postgres_service:
        condition: service_healthy
    networks:
      - cryptotrading_network
    restart: unless-stopped
  
volumes:
  postgres_data:

networks:
  cryptotrading_network:
    driver: bridge
